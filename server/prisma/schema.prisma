generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  posts    Post[]
  profile  Profile?
  tweet    Tweet[]
  likedTweet LikedTweet[]
  following Following[]
  comments Comment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Profile{
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  bio String?
  location String?
  website String?
  avatar String?
  userId Int? @unique
  User User? @relation(fields: [userId], references: [id])
}

model Tweet{
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  authorId Int?
  author User? @relation(fields: [authorId], references: [id])
  likes  LikedTweet[]
  comments Comment[]
}

model LikedTweet{
   id Int @id @default(autoincrement())
   tweet Tweet  @relation(fields: [tweetId], references: [id])
   likedAt DateTime @default(now())
   userId Int?
   user User?   @relation(fields: [userId], references: [id])
   tweetId Int
}

model Following{
  id       Int    @id @default(autoincrement())
  name     String
  avatar   String
  followId Int
  user     User?  @relation(fields: [userId], references: [id])
  userId   Int?

}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  content   String?
  Tweet     Tweet?    @relation(fields: [tweetId], references: [id])
  tweetId   Int?
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  comments  Comment[] @relation("CommentToComment")
  Comment   Comment?  @relation("CommentToComment", fields: [commentId], references: [id])
  commentId Int?
}

